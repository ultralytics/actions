# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license

name: List Open PRs

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *"

permissions:
  contents: write
  pull-requests: write

jobs:
  list-prs:
    runs-on: ubuntu-latest
    steps:
      - name: List open PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: python
        run: |
          import os, json, subprocess
          from datetime import datetime, timezone

          # Get active public repos
          result = subprocess.run(
              ["gh", "repo", "list", "ultralytics", "--limit", "1000", "--json", "name,url,isArchived", "--visibility", "public"],
              capture_output=True, text=True, check=True
          )
          repos = {r["name"]: r["url"] for r in json.loads(result.stdout) if not r["isArchived"]}

          # Get all open PRs
          result = subprocess.run(
              ["gh", "search", "prs", "--owner", "ultralytics", "--state", "open", "--limit", "1000",
               "--json", "repository,number,title,url,createdAt", "--sort", "created", "--order", "desc"],
              capture_output=True, text=True, check=True
          )
          all_prs = json.loads(result.stdout)

          summary = ["# 🔍 Open Pull Requests - Ultralytics Organization\n"]
          
          for repo_name in sorted(set(pr["repository"]["name"] for pr in all_prs)):
              if repo_name not in repos:
                  continue
              
              repo_prs = [pr for pr in all_prs if pr["repository"]["name"] == repo_name]
              summary.append(f"## 📦 [{repo_name}]({repos[repo_name]}) - {len(repo_prs)} open PR{'s' if len(repo_prs) > 1 else ''}")
              
              for pr in repo_prs[:10]:
                  age_days = (datetime.now(timezone.utc) - datetime.fromisoformat(pr["createdAt"].replace("Z", "+00:00"))).days
                  badge = " **[🆕 NEW]**" if age_days == 0 else f" ({age_days}d)"
                  summary.append(f"- 🔀 [#{pr['number']}]({pr['url']}) {pr['title']}{badge}")
              
              if len(repo_prs) > 10:
                  summary.append(f"- ... {len(repo_prs) - 10} more PRs")
              summary.append("")

          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
              f.write("\n".join(summary))

      - name: Merge Dependabot Actions PRs
        env:
          GH_TOKEN: ${{ secrets._GITHUB_TOKEN }}
        shell: python
        run: |
          import os, json, subprocess

          result = subprocess.run(
              ["gh", "repo", "list", "ultralytics", "--limit", "1000", "--json", "name,isArchived", "--visibility", "public"],
              capture_output=True, text=True, check=True
          )
          repos = [r["name"] for r in json.loads(result.stdout) if not r["isArchived"]]

          summary = ["\n# 🤖 Merging Dependabot GitHub Actions PRs\n"]
          
          for repo in repos:
              result = subprocess.run(
                  ["gh", "pr", "list", "--repo", f"ultralytics/{repo}", "--author", "app/dependabot",
                   "--state", "open", "--json", "number,files,mergeable"],
                  capture_output=True, text=True
              )
              if result.returncode != 0:
                  continue
              
              merged = 0
              for pr in json.loads(result.stdout):
                  if merged >= 1 or pr["mergeable"] != "MERGEABLE":
                      continue
                  if all(f["path"].startswith(".github/workflows/") for f in pr["files"]):
                      result = subprocess.run(
                          ["gh", "pr", "merge", str(pr["number"]), "--repo", f"ultralytics/{repo}", 
                           "--squash", "--admin"],
                          capture_output=True
                      )
                      if result.returncode == 0:
                          summary.append(f"- ✅ Merged ultralytics/{repo}#{pr['number']}")
                          merged += 1

          with open(os.environ["GITHUB_STEP_SUMMARY"], "a") as f:
              f.write("\n".join(summary))
