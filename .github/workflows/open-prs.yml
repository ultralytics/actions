# Ultralytics 🚀 AGPL-3.0 License - https://ultralytics.com/license

# List Open PRs across Ultralytics repositories
# This workflow scans all public repos in the Ultralytics organization and lists open PRs
# For repos with >10 open PRs, only the 10 most recent are shown

name: List Open PRs

on:
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * *" # daily at 03:00 UTC
    
permissions:
  contents: write
  pull-requests: write

jobs:
  list-prs:
    runs-on: ubuntu-latest
    steps:
      - name: List open PRs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "# 🔍 Open Pull Requests - Ultralytics Organization" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Get all public non-archived repos
          gh repo list ultralytics --limit 1000 --json name,url,isArchived --visibility public | \
            jq '[.[] | select(.isArchived == false)]' > /tmp/active_repos.json
          
          # Get all open PRs across organization
          gh search prs --owner ultralytics --state open --limit 1000 --json repository,number,title,url \
            --sort created --order desc > /tmp/all_prs.json

          # Process by repository
          for repo in $(jq -r '[.[].repository.name] | unique | .[]' /tmp/all_prs.json); do
            # Get repo URL, skip if archived (null/empty)
            url=$(jq -r --arg repo "$repo" '.[] | select(.name == $repo) | .url' /tmp/active_repos.json)
            [[ -z "$url" || "$url" == "null" ]] && continue
            
            repo_prs=$(jq --arg repo "$repo" '[.[] | select(.repository.name == $repo)]' /tmp/all_prs.json)
            count=$(echo "$repo_prs" | jq 'length')
            pr_text="PR"; [ "$count" -gt 1 ] && pr_text="PRs"
            
            echo "## 📦 [$repo]($url) - $count open $pr_text" >> $GITHUB_STEP_SUMMARY
            
            if [ "$count" -gt 10 ]; then
              echo "$repo_prs" | jq -r '.[0:10] | .[] | "- 🔀 [#\(.number)](\(.url)) \(.title)"' >> $GITHUB_STEP_SUMMARY
              echo "- ... $((count - 10)) more PRs" >> $GITHUB_STEP_SUMMARY
            else
              echo "$repo_prs" | jq -r '.[] | "- 🔀 [#\(.number)](\(.url)) \(.title)"' >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
          done

      - name: Merge Dependabot Actions PRs
        env:
          GH_TOKEN: ${{ secrets._GITHUB_TOKEN }}
        run: |
          max_prs=1  # Maximum PRs to merge per repo
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# 🤖 Merging Dependabot GitHub Actions PRs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "0" > /tmp/merged_count.txt
          
          # For each active repo, merge at most max_prs PRs
          for repo in $(jq -r '.[].name' /tmp/active_repos.json); do
            repo_merged=0
            
            # Get dependabot PRs
            prs=$(gh pr list --repo "ultralytics/$repo" --author app/dependabot --state open \
              --json number,files,mergeable 2>/dev/null || echo "[]")
            
            # Check each PR
            for pr in $(echo "$prs" | jq -c '.[]'); do
              [ $repo_merged -ge $max_prs ] && break
              
              pr_number=$(echo "$pr" | jq -r '.number')
              mergeable=$(echo "$pr" | jq -r '.mergeable')
              file_count=$(echo "$pr" | jq '.files | length')
              
              # Skip if not mergeable or no files
              [[ "$mergeable" != "MERGEABLE" || "$file_count" -eq 0 ]] && continue
              
              # Check if all files are in .github/workflows
              non_workflow_count=$(echo "$pr" | jq '[.files[] | select(.path | startswith(".github/workflows/") | not)] | length')
              
              # Merge if only workflow files (use admin to bypass branch protection)
              if [ "$non_workflow_count" -eq 0 ]; then
                if gh pr merge "$pr_number" --repo "ultralytics/$repo" --squash --admin 2>/dev/null; then
                  echo "- ✅ Merged ultralytics/$repo#$pr_number" >> $GITHUB_STEP_SUMMARY
                  merged_count=$(cat /tmp/merged_count.txt)
                  echo "$((merged_count + 1))" > /tmp/merged_count.txt
                  ((repo_merged++))
                fi
              fi
            done
          done
          
          merged_count=$(cat /tmp/merged_count.txt)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total merged:** $merged_count" >> $GITHUB_STEP_SUMMARY
